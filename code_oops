#include <iostream>
#include <string>
using namespace std;

class Student {
private:
    int rollNo;
    string name;
    float marks[5];
    float average;
    char grade;

public:
    // Constructor for initialization
    Student(int r = 0, string n = "") {
        rollNo = r;
        name = n;
        average = 0;
        grade = 'F';
        for (int i = 0; i < 5; i++)
            marks[i] = 0;
    }

    // Function to input marks and calculate average
    void inputMarks() {
        cout << "Enter marks of 5 subjects for " << name << " (out of 100):\n";
        float sum = 0;
        for (int i = 0; i < 5; i++) {
            cin >> marks[i];
            sum += marks[i];
        }
        average = sum / 5.0;
    }

    // Function to calculate grade
    void calculateGrade() {
        if (average >= 90)
            grade = 'A';
        else if (average >= 75)
            grade = 'B';
        else if (average >= 60)
            grade = 'C';
        else if (average >= 50)
            grade = 'D';
        else
            grade = 'F';
    }

    // Display function
    void display() {
        cout << "\nRoll No: " << rollNo;
        cout << "\nName: " << name;
        cout << "\nAverage Marks: " << average;
        cout << "\nGrade: " << grade << endl;
    }

    // Friend function to find topper
    friend Student findTopper(Student s[], int n);
};

// Friend function definition
Student findTopper(Student s[], int n) {
    int topIndex = 0;
    for (int i = 1; i < n; i++) {
        if (s[i].average > s[topIndex].average)
            topIndex = i;
    }
    return s[topIndex];
}

// Main function
int main() {
    int n;
    cout << "Enter number of students: ";
    cin >> n;

    Student *s = new Student[n];

    // Taking details of students
    for (int i = 0; i < n; i++) {
        int roll;
        string name;
        cout << "\nEnter Roll No: ";
        cin >> roll;
        cin.ignore();  // to clear buffer
        cout << "Enter Name: ";
        getline(cin, name);

        s[i] = Student(roll, name);
        s[i].inputMarks();
        s[i].calculateGrade();
    }

    cout << "\n--- Student Details ---";
    for (int i = 0; i < n; i++) {
        s[i].display();
    }

    // Find and display topper
    Student topper = findTopper(s, n);
    cout << "\n--- Topper Details ---";
    topper.display();

    delete[] s;
    return 0;
}
